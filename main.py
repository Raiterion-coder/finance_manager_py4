import os
import sys
from datetime import datetime
from pathlib import Path
from PyQt5 import QtWidgets, QtCore, uic
from PyQt5.QtGui import QDesktopServices
from PyQt5.QtCore import QUrl
from app.database import Database
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure

# –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∫–∞–∫ exe
if getattr(sys, 'frozen', False):
    BASE_DIR = Path(sys.executable).parent  # –ø–∞–ø–∫–∞, –≥–¥–µ –ª–µ–∂–∏—Ç .exe
else:
    BASE_DIR = Path(__file__).resolve().parent  # –ø–∞–ø–∫–∞, –≥–¥–µ –ª–µ–∂–∏—Ç main.py


# –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å–∞–º (–¥–ª—è exe –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
def resource_path(relative_path):
    if hasattr(sys, '_MEIPASS'):  # –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —á–µ—Ä–µ–∑ PyInstaller
        return os.path.join(sys._MEIPASS, relative_path)
    return os.path.join(os.path.abspath("."), relative_path)


def resource(rel):
    return str(QtCore.QDir.current().filePath(rel))


class MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        uic.loadUi(resource_path("ui/main_window.ui"), self)
        self.db = Database()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü
        self.tblAccounts.setColumnCount(2)
        self.tblAccounts.setHorizontalHeaderLabels(["–ù–∞–∑–≤–∞–Ω–∏–µ", "–ë–∞–ª–∞–Ω—Å"])
        self.tblAccounts.horizontalHeader().setStretchLastSection(True)  # —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
        self.tblAccounts.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tblAccounts.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.btnShowChart.clicked.connect(self.show_chart)  # –∫–Ω–æ–ø–∫–∞ ¬´–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫¬ª –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ show_chart

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        self.tblTransactions.setColumnCount(6)
        self.tblTransactions.setHorizontalHeaderLabels(["–î–∞—Ç–∞", "–°—á—ë—Ç", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–°—É–º–º–∞", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–§–æ—Ç–æ"])
        self.tblTransactions.horizontalHeader().setStretchLastSection(True)
        self.tblTransactions.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tblTransactions.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)

        # –ö–Ω–æ–ø–∫–∏
        self.refresh_tables()  # –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã
        self.btnAddAccount.clicked.connect(self.add_account)
        self.btnAddTx.clicked.connect(self.on_add_transaction)
        self.btnShowImage.clicked.connect(self.show_image)
        self.btnDelAccount.clicked.connect(self.delete_account)
        self.btnDelTx.clicked.connect(self.delete_transaction)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—á–µ—Ç–æ–≤ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    def refresh_tables(self):
        # --- –°—á–µ—Ç–∞ ---
        accs = self.db.list_accounts()
        self.tblAccounts.setRowCount(0)
        for i, a in enumerate(accs):
            self.tblAccounts.insertRow(i)
            self.tblAccounts.setItem(i, 0, QtWidgets.QTableWidgetItem(a['name']))
            self.tblAccounts.setItem(i, 1, QtWidgets.QTableWidgetItem(str(a['balance'])))

        # --- –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ---
        txs = self.db.list_transactions()
        self.tblTransactions.setRowCount(0)
        for i, t in enumerate(txs):
            self.tblTransactions.insertRow(i)
            self.tblTransactions.setItem(i, 0, QtWidgets.QTableWidgetItem(t['date']))
            self.tblTransactions.setItem(i, 1, QtWidgets.QTableWidgetItem(t['account']))
            self.tblTransactions.setItem(i, 2, QtWidgets.QTableWidgetItem(t['category']))
            self.tblTransactions.setItem(i, 3, QtWidgets.QTableWidgetItem(str(t['amount'])))
            self.tblTransactions.setItem(i, 4, QtWidgets.QTableWidgetItem(t['comment']))
            has_photo = t['photo'] is not None
            self.tblTransactions.setItem(i, 5, QtWidgets.QTableWidgetItem("üì∑" if has_photo else "-"))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
    def add_account(self):
        name, ok = QtWidgets.QInputDialog.getText(self, '–î–æ–±–∞–≤–∏—Ç—å —Å—á—ë—Ç', '–ù–∞–∑–≤–∞–Ω–∏–µ —Å—á—ë—Ç–∞:')
        if not ok or not name.strip():
            return

        # –û–∫–Ω–æ –≤–≤–æ–¥–∞ –±–∞–ª–∞–Ω—Å–∞
        balance, ok = QtWidgets.QInputDialog.getDouble(
            self, '–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å', '–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:', 0.0,
            -999999999, 999999999, 2
        )
        if not ok:
            return
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        self.db.add_account(name.strip(), balance)
        self.refresh_tables()

    # –ü–æ—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è —Å—á–µ—Ç–∞
    def show_chart(self):
        accounts = self.db.list_accounts()
        if not accounts:
            QtWidgets.QMessageBox.warning(self, "–ù–µ—Ç —Å—á–µ—Ç–æ–≤", "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å—á—ë—Ç.")
            return

        items = [f"{a['id']} - {a['name']}" for a in accounts]
        item, ok = QtWidgets.QInputDialog.getItem(self, "–í—ã–±–æ—Ä —Å—á—ë—Ç–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç:", items, 0, False)
        if not ok or not item:
            return

        selected_id = int(item.split(" - ")[0])
        account = next((a for a in accounts if a["id"] == selected_id), None)
        if not account:
            QtWidgets.QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        txs = [
            t for t in self.db.list_transactions()
            if self.db.conn.execute(
                "SELECT id FROM accounts WHERE name=?", (t["account"],)
            ).fetchone()["id"] == selected_id
        ]

        if not txs:
            QtWidgets.QMessageBox.information(self, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—á—ë—Ç–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
            return

        daily = {}
        for t in txs:
            d = t["date"]
            amt = float(t["amount"])
            daily[d] = daily.get(d, 0) + amt

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞—Ç –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        try:
            dates = [datetime.strptime(d, "%Y-%m-%d") for d in sorted(daily.keys())]
        except Exception:
            dates = sorted(daily.keys())

        balance = []
        current_balance = account["balance"]  # –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤ –±–∞–∑–µ

        total_transactions = sum(daily.values())
        start_balance = current_balance - total_transactions

        running_balance = start_balance
        for d in sorted(daily.keys()):
            running_balance += daily[d]
            balance.append(running_balance)

        # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
        dialog = QtWidgets.QDialog(self)
        dialog.setWindowTitle(f"–ì—Ä–∞—Ñ–∏–∫ —Å—á—ë—Ç–∞: {account['name']}")
        dialog.resize(900, 600)

        fig = Figure(figsize=(9, 6))
        canvas = FigureCanvas(fig)
        ax = fig.add_subplot(111)

        layout = QtWidgets.QVBoxLayout(dialog)
        layout.addWidget(canvas)

        ax.plot(dates, balance, marker='o', linestyle='-', linewidth=2)
        ax.grid(True)
        ax.set_title(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: {account['name']}")
        ax.set_xlabel("–î–∞—Ç–∞")
        ax.set_ylabel("–ë–∞–ª–∞–Ω—Å, ‚ÇΩ")

        ax.text(dates[-1], balance[-1], f"{balance[-1]:,.2f} ‚ÇΩ", fontsize=10, color='blue', ha='left', va='bottom')

        canvas.draw()
        dialog.exec_()

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
    def delete_account(self):
        row = self.tblAccounts.currentRow()
        if row < 0:
            QtWidgets.QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        name = self.tblAccounts.item(row, 0).text()

        reply = QtWidgets.QMessageBox.question(
            self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–£–¥–∞–ª–∏—Ç—å —Å—á—ë—Ç '{name}' –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏?",
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No
        )
        if reply != QtWidgets.QMessageBox.Yes:
            return

        cur = self.db.conn.cursor()
        cur.execute("SELECT id FROM accounts WHERE name=?", (name,))
        acc = cur.fetchone()
        if not acc:
            QtWidgets.QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        account_id = acc["id"]

        txs = self.db.conn.execute(
            "SELECT date, category, amount FROM transactions WHERE account_id=?",
            (account_id,)
        ).fetchall()

        # –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ delete_transaction()
        for t in txs:
            try:
                self.db.delete_transaction(t["date"], name, t["category"], t["amount"])
            except Exception as e:
                print(f"[WARNING] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")

        self.db.conn.execute("DELETE FROM accounts WHERE id=?", (account_id,))
        self.db.conn.commit()

        self.refresh_tables()
        QtWidgets.QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", f"–°—á—ë—Ç '{name}' –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã.")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    def on_add_transaction(self):
        dlg = QtWidgets.QDialog(self)
        uic.loadUi(resource_path("ui/add_transaction.ui"), dlg)

        dateEdit = dlg.findChild(QtWidgets.QDateEdit, "dateEdit")
        cmbAccount = dlg.findChild(QtWidgets.QComboBox, "cmbAccount")
        edtCategory = dlg.findChild(QtWidgets.QLineEdit, "edtCategory")
        spinAmount = dlg.findChild(QtWidgets.QDoubleSpinBox, "spinAmount")
        edtComment = dlg.findChild(QtWidgets.QLineEdit, "edtComment")
        buttonBox = dlg.findChild(QtWidgets.QDialogButtonBox, "buttonBox")
        btnAddPhoto = dlg.findChild(QtWidgets.QPushButton, "btnAddPhoto")
        btnOpenPhoto = dlg.findChild(QtWidgets.QPushButton, "btnOpenPhoto")
        lblPhotoPath = dlg.findChild(QtWidgets.QLabel, "lblPhotoPath")

        photo_path = None

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—á–µ—Ç–∞
        accounts = self.db.list_accounts()
        for a in accounts:
            cmbAccount.addItem(a["name"], a["id"])

        # –í—ã–±–æ—Ä —Ñ–æ—Ç–æ
        def select_photo():
            nonlocal photo_path
            file_path, _ = QtWidgets.QFileDialog.getOpenFileName(
                self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ", "", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (*.png *.jpg *.jpeg *.bmp)"
            )
            if file_path:
                photo_path = file_path  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ BLOB
                lblPhotoPath.setText(Path(file_path).name)

        def open_photo():
            if photo_path and Path(photo_path).exists():
                QDesktopServices.openUrl(QUrl.fromLocalFile(photo_path))
            else:
                QtWidgets.QMessageBox.warning(self, "–§–æ—Ç–æ", "–§–æ—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        btnAddPhoto.clicked.connect(select_photo)
        btnOpenPhoto.clicked.connect(open_photo)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        def handle_accept():
            date = dateEdit.date().toString("yyyy-MM-dd")
            account_id = cmbAccount.currentData()
            category = edtCategory.text().strip()
            amount = float(spinAmount.value())
            comment = edtComment.text().strip()

            if account_id is None:
                QtWidgets.QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç")
                return
            if amount == 0:
                QtWidgets.QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å 0")
                return

            rbtnExpense = dlg.findChild(QtWidgets.QRadioButton, "rbtnExpense")

            if rbtnExpense.isChecked():
                amount = -abs(amount)  # —Ä–∞—Å—Ö–æ–¥ -> –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
            else:
                amount = abs(amount)  # –¥–æ—Ö–æ–¥ -> –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ

            self.db.add_transaction(date, account_id, category, amount, comment, photo_path)
            self.db.update_account_balance(account_id, amount)
            dlg.accept()

        buttonBox.accepted.connect(handle_accept)
        buttonBox.rejected.connect(dlg.reject)

        if dlg.exec_() == QtWidgets.QDialog.Accepted:
            self.refresh_tables()

    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    def delete_transaction(self):
        row = self.tblTransactions.currentRow()
        if row < 0:
            QtWidgets.QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        date = self.tblTransactions.item(row, 0).text()
        account = self.tblTransactions.item(row, 1).text()
        category = self.tblTransactions.item(row, 2).text()
        amount = float(self.tblTransactions.item(row, 3).text())

        reply = QtWidgets.QMessageBox.question(
            self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é '{category}' ({amount})?",
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No
        )
        if reply != QtWidgets.QMessageBox.Yes:
            return

        try:
            self.db.delete_transaction(date, account, category, amount)
            self.refresh_tables()
            QtWidgets.QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∏ —Ñ–æ—Ç–æ —É–¥–∞–ª–µ–Ω—ã (–µ—Å–ª–∏ –±—ã–ª–æ).")

        except ValueError as e:
            QtWidgets.QMessageBox.warning(self, "–û—à–∏–±–∫–∞", str(e))
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:\n{e}")

    # –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    def show_image(self):
        row = self.tblTransactions.currentRow()
        if row < 0:
            QtWidgets.QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
            return

        date = self.tblTransactions.item(row, 0).text()
        account = self.tblTransactions.item(row, 1).text()
        category = self.tblTransactions.item(row, 2).text()
        amount = float(self.tblTransactions.item(row, 3).text())

        photo_file = self.db.get_transaction_photo(date, account, category, amount)
        if photo_file:
            QDesktopServices.openUrl(QUrl.fromLocalFile(photo_file))
        else:
            QtWidgets.QMessageBox.information(self, "–§–æ—Ç–æ", "–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    def keyPressEvent(self, event):
        # –ö–ª–∞–≤–∏—à–∞ Delete
        if event.key() == QtCore.Qt.Key_Delete:
            # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
            if self.tblTransactions.hasFocus():
                self.delete_transaction()
            # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å—á–µ—Ç–æ–≤
            elif self.tblAccounts.hasFocus():
                self.delete_account()
            else:
                QtWidgets.QMessageBox.information(
                    self, "–£–¥–∞–ª–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É (—Å—á–µ—Ç–∞ –∏–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞."
                )


# –ó–∞–ø—É—Å–∫

if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    w = MainWindow()
    w.show()
    sys.exit(app.exec_())
